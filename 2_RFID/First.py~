"""
Python MQTT Subscription client - No Username/Password
Thomas Varnish (https://github.com/tvarnish), (https://www.instructables.com/member/Tango172)
Written for my Instructable - "How to use MQTT with the Raspberry Pi and ESP8266"
"""
import paho.mqtt.client as mqtt
from time import time, sleep
from module import load_module_info
from settings import *

# Don't forget to change the variables for the MQTT broker!
mqtt_topic_receive = "sendPC"
mqtt_topic_send = "getPC"
mqtt_broker_ip = "localhost"

client = mqtt.Client()


#Variable needs for the program

sysTime = time() #Time of last step for the program

# These functions handle what happens when the MQTT client connects
# to the broker, and what happens then the topic receives a message
def on_connect(client, userdata, flags, rc):
    # rc is the error code returned when connecting to the broker
    print("Connected!"+str(rc))
    # Once the client has connected to the broker, subscribe to the topic
    client.subscribe(mqtt_topic_receive)
    
def on_message(client, userdata, msg):
    # This function is called everytime the topic is published to.
    # If you want to check each message, and do something depending on
    # the content, the code to do this should be run in this function

    ID_tag = str(msg.payload)
    ex_tag = False

    for i in database:
       if i[1] == ID_tag:
           ex_tag = True
           message = 'The ID of this tag is ' + ID_tag + ' and this is' + i[0]
           
    if ex_tag == False:
        message = 'This ID does not exist yet'

    client.publish(mqtt_topic_send, message)
    print("Topic: "+ msg.topic + "\nMessage: " + ID_tag)

    # The message itself is stored in the msg variable
    # and details about who sent it are stored in userdata

def create_db():
    database = load_module_info()
    for i in range(len(database)):
        database[i] = str(database[i])
        database[i] = database[i][:-1]
        database[i] = database[i].split("(")
    return database
database = create_db()

# Here, we are telling the client which functions are to be run
# on connecting, and on receiving a message
client.on_connect = on_connect
client.on_message = on_message

# Once everything has been set up, we can (finally) connect to the broker
# 1883 is the listener port that the MQTT broker is using
client.connect(mqtt_broker_ip, 1883)


# Once we have told the client to connect, let the client object run itself
client.loop_start()
client.disconnect()


